<div class="bg-gray-600">
  <div class="mx-auto max-w-7xl min-h-screen bg-gray-200">
    <h1 class="p-2 text-2xl font-bold font-serif">Dashboard</h1>
    <p class="p-2 text-gray-600 mb-6">ログイン中のメールアドレス：<%= Current.user.email_address if Current.user %></p>

    <div class="flex justify-center">
      <div class="mx-5 bg-white p-8 rounded-lg shadow-lg w-full max-w-lg h-full">

        <div class="flex flex-row text-center justify-center mb-6 text-2xl font-medium">
          <p class="m-2"><%= Time.current.in_time_zone('Asia/Tokyo').strftime('%Y/%m/%d (%A)') %></p>
          <p class="m-2"><span id="current-time" class="font-mono"><%= Time.current.in_time_zone('Asia/Tokyo').strftime('%H:%M:%S') %></span></p>
        </div>

        <div class="my-5 text-gray-700 font-medium">
          <div class="flex items-center mb-4">
            <label for="time-input" class="block mr-2">Input Starting time：</label>
            <input type="time" id="time-input" class="block w-32 rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm">
            <button id="save-time" class="ml-2 px-4 py-1 bg-blue-300 text-white rounded-md hover:bg-blue-500">Save</button>
          </div>
          <div class="block mb-4">
            <label for="time-display">Starting time：</label>
            <span id="display-time" class="font-mono">--:--</span></p>
          </div>
          <div class="flex items-center">
            <p class=" mr-5">Time tracked：<span id="time-tracked" class="font-mono">--:--</span></p>
            <input type="checkbox" id="break-checkbox" class="mr-2">
            <label for="break-checkbox" class="text-sm font-medium">Include break time</label>
          </div>
        </div>
      </div>

      <div class="mx-5 flex flex-col w-full max-w-md h-full">
        <div class="bg-white p-6 rounded-lg shadow-lg">
          <div class="p-2 bg-blue-50 rounded-lg">
            <label for="hs-trailing-button-add-on" class="sr-only">Label</label>
            <div class="flex rounded-lg">
              <input type="text" id="add-text" name="hs-trailing-button-add-on" class="bg-white py-2.5 sm:py-3 px-4 block w-full border-gray-200 rounded-s-lg sm:text-sm focus:z-10 focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none">
              <button id="add-button" type="button" class="py-3 px-4 inline-flex justify-center items-center gap-x-2 text-sm font-semibold rounded-e-md border border-transparent bg-blue-600 text-white hover:bg-blue-700 focus:outline-hidden focus:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none">
                Add
              </button>
            </div>
          </div>

          <div class="my-5 p-8 rounded-lg shadow-lg w-full max-w-md">
            <p class="text-center mb-2 text-xl font-semibold">Incomplete</p>
            <ul class="incomplete-lists">
            </ul>
          </div>

          <div class="my-5 p-8 rounded-lg shadow-lg w-full max-w-md">
            <p class="text-center mb-2 text-xl font-semibold">Complete</p>
            <ul class="complete-lists">
            </ul>
          </div>

        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // function updateTime() {
  //   const now = new Date();
  //   const hours = String(now.getHours()).padStart(2, '0');
  //   const minutes = String(now.getMinutes()).padStart(2, '0');
  //   const seconds = String(now.getSeconds()).padStart(2, '0');
  //   const currentTime = `${hours}:${minutes}:${seconds}`;
  //   document.getElementById('current-time').textContent = currentTime;

  //   const savedTime = localStorage.getItem('savedTime');
  //   if (savedTime) {
  //     const [startHours, startMinutes] = savedTime.split(':').map(Number);
  //     const startTime = new Date(now);
  //     startTime.setHours(startHours, startMinutes, 0, 0);

  //     let elapsedMilliseconds = now - startTime;
  //     const breakCheckbox = document.getElementById('break-checkbox');
  //     if (breakCheckbox.checked) {
  //       elapsedMilliseconds -= 60 * 60 * 1000; // 1時間を引く
  //     }

  //     const elapsedMinutes = Math.floor(elapsedMilliseconds / (1000 * 60));
  //     const elapsedHours = Math.floor(elapsedMinutes / 60);
  //     const remainingMinutes = elapsedMinutes % 60;
  //     document.getElementById('time-tracked').textContent = `${elapsedHours}h ${remainingMinutes}m`;
  //   }
  // }

  // function saveInputTime() {
  //   const timeInput = document.getElementById('time-input').value;
  //   document.getElementById('display-time').textContent = timeInput;
  //   localStorage.setItem('savedTime', timeInput);
  // }

  // document.getElementById('save-time').addEventListener('click', saveInputTime);

  // setInterval(updateTime, 1000);
  // updateTime(); // 初回実行

  // // ページ読み込み時に保存された時間を表示
  // document.addEventListener('DOMContentLoaded', () => {
  //   const savedTime = localStorage.getItem('savedTime');
  //   if (savedTime) {
  //     document.getElementById('display-time').textContent = savedTime;
  //     document.getElementById('time-input').value = savedTime;
  //   }
  // });

  // const onClickAdd = () => {
  //   const inputText = document.getElementById('add-text').value;
  //   document.getElementById('add-text').value = '';
  //   createIncompleteTodo(inputText);
  // }

  // const createIncompleteTodo = (todo) => {
  //   const li = document.createElement('li');
  //   li.className = 'flex items-center justify-between';

  //   const p = document.createElement('p');
  //   p.className = 'flex-grow my-3';
  //   p.innerText = todo;

  //   const div = document.createElement('div');
  //   div.className = 'flex-shrink-0';

  //   const completeButton = document.createElement('button');
  //   completeButton.className = 'ml-2 px-4 py-1 bg-blue-300 text-white rounded-md hover:bg-blue-500';
  //   completeButton.innerText = 'Complete';
  //   completeButton.addEventListener('click', () => {
  //     const moveTarget = completeButton.closest('li');
  //     completeButton.nextElementSibling.remove();
  //     completeButton.remove();
  //     const backButton = document.createElement('button');
  //     backButton.className = 'ml-2 px-4 py-1 bg-blue-300 text-white rounded-md hover:bg-blue-500';
  //     backButton.innerText = 'back';
  //     backButton.addEventListener('click', () => {
  //       const todoText = backButton.closest('li').querySelector('p').innerText;
  //       createIncompleteTodo(todoText);
  //       document.querySelector('.complete-lists').removeChild(backButton.closest('li'));
  //     });
  //     div.appendChild(backButton);
  //     document.querySelector('.complete-lists').appendChild(moveTarget);
  //   });

  //   const deleteButton = document.createElement('button');
  //   deleteButton.className = 'ml-2 px-4 py-1 bg-red-300 text-white rounded-md hover:bg-red-500';
  //   deleteButton.innerText = 'Delete';
  //   deleteButton.addEventListener('click', () => {
  //     const deleteTarget = deleteButton.closest('li');
  //     document.querySelector('.incomplete-lists').removeChild(deleteTarget);
  //   });

  //   li.appendChild(p);
  //   li.appendChild(div);
  //   div.appendChild(completeButton);
  //   div.appendChild(deleteButton);
  //   document.querySelector('.incomplete-lists').appendChild(li);
  // };

  // document.getElementById('add-button').addEventListener('click', onClickAdd);
</script>